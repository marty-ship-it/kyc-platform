generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(cuid())
  name         String
  email        String @unique
  role         Role
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  createdDeals     Deal[]
  auditEvents      AuditEvent[]
  trainingRecords  TrainingRecord[]

  @@map("users")
}

model Organisation {
  id       String @id @default(cuid())
  name     String
  abn      String
  timezone String @default("Australia/Sydney")

  deals            Deal[]
  policyDocuments  PolicyDocument[]
  auditEvents      AuditEvent[]

  @@map("organisations")
}

model Deal {
  id        String     @id @default(cuid())
  address   String
  price     Int
  status    DealStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  createdByUserId String
  createdBy       User   @relation(fields: [createdByUserId], references: [id])
  orgId           String
  org             Organisation @relation(fields: [orgId], references: [id])

  parties         Party[]
  transactions    Transaction[]
  reports         Report[]
  riskAssessment  RiskAssessment?
  evidenceFiles   EvidenceFile[]

  @@map("deals")
}

model Party {
  id        String    @id @default(cuid())
  dealId    String
  type      PartyType
  fullName  String
  dob       DateTime?
  country   String?
  docType   String?
  docNumber String?
  pepFlag   Boolean   @default(false)
  createdAt DateTime  @default(now())

  deal       Deal         @relation(fields: [dealId], references: [id], onDelete: Cascade)
  kycCheck   KycCheck?
  screening  Screening?
  evidenceFiles EvidenceFile[]

  @@map("parties")
}

model KycCheck {
  id                 String    @id @default(cuid())
  partyId            String    @unique
  dvStatus           DvStatus  @default(MANUAL)
  liveness           Boolean   @default(false)
  proofOfAddressUrl  String?
  resultJson         String?
  createdAt          DateTime  @default(now())

  party Party @relation(fields: [partyId], references: [id], onDelete: Cascade)

  @@map("kyc_checks")
}

model Screening {
  id           String  @id @default(cuid())
  partyId      String  @unique
  pep          Boolean @default(false)
  sanctions    Boolean @default(false)
  adverseMedia Boolean @default(false)
  resultJson   String?
  createdAt    DateTime @default(now())

  party Party @relation(fields: [partyId], references: [id], onDelete: Cascade)

  @@map("screenings")
}

model RiskAssessment {
  id          String    @id @default(cuid())
  dealId      String    @unique
  score       RiskScore
  answersJson String?
  rationale   String?
  createdAt   DateTime  @default(now())

  deal Deal @relation(fields: [dealId], references: [id], onDelete: Cascade)

  @@map("risk_assessments")
}

model Transaction {
  id             String            @id @default(cuid())
  dealId         String
  type           TransactionType
  amount         Int
  currency       String            @default("AUD")
  direction      TransactionDirection
  counterparty   String
  method         PaymentMethod
  isCrossBorder  Boolean           @default(false)
  receivedAt     DateTime
  createdAt      DateTime          @default(now())

  deal Deal @relation(fields: [dealId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Report {
  id          String       @id @default(cuid())
  dealId      String
  kind        ReportKind
  status      ReportStatus @default(DRAFT)
  pdfUrl      String?
  jsonUrl     String?
  submittedAt DateTime?
  createdAt   DateTime     @default(now())

  deal Deal @relation(fields: [dealId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model PolicyDocument {
  id            String   @id @default(cuid())
  orgId         String
  title         String
  markdown      String
  version       String
  effectiveFrom DateTime
  createdAt     DateTime @default(now())

  org Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("policy_documents")
}

model TrainingRecord {
  id          String         @id @default(cuid())
  userId      String
  course      TrainingCourse
  completedAt DateTime?
  createdAt   DateTime       @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("training_records")
}

model EvidenceFile {
  id           String       @id @default(cuid())
  dealId       String?
  partyId      String?
  kind         EvidenceKind
  fileUrl      String
  metadataJson String?
  createdAt    DateTime     @default(now())

  deal  Deal?  @relation(fields: [dealId], references: [id], onDelete: Cascade)
  party Party? @relation(fields: [partyId], references: [id], onDelete: Cascade)

  @@map("evidence_files")
}

model AuditEvent {
  id          String   @id @default(cuid())
  orgId       String
  userId      String?
  entity      String
  entityId    String
  action      String
  payloadJson String?
  createdAt   DateTime @default(now())

  org  Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user User?        @relation(fields: [userId], references: [id])

  @@map("audit_events")
}

enum Role {
  DIRECTOR
  AGENT
  COMPLIANCE
}

enum DealStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PartyType {
  BUYER
  SELLER
  UBO
}

enum DvStatus {
  PASS
  FAIL
  MANUAL
}

enum RiskScore {
  LOW
  MEDIUM
  HIGH
}

enum TransactionType {
  DEPOSIT
  BALANCE
}

enum TransactionDirection {
  IN
  OUT
}

enum PaymentMethod {
  BANK
  CASH
  CARD
}

enum ReportKind {
  TTR
  SMR
  ANNUAL
}

enum ReportStatus {
  DRAFT
  FINAL
}

enum TrainingCourse {
  AML_BASICS
  KYC_101
  REPORTING
}

enum EvidenceKind {
  KYC_DOC
  TRANSACTION_PROOF
  REPORT
}