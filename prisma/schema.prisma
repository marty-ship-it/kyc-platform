generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String @id @default(cuid())
  name         String
  email        String @unique
  role         Role
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  createdDeals     Deal[]
  createdCases     Case[]
  auditEvents      AuditEvent[]
  trainingRecords  TrainingRecord[]

  @@map("users")
}

model Organisation {
  id       String @id @default(cuid())
  name     String
  abn      String
  timezone String @default("Australia/Sydney")

  deals            Deal[]
  entities         Entity[]
  cases            Case[]
  policyDocuments  PolicyDocument[]
  auditEvents      AuditEvent[]

  @@map("organisations")
}

model Entity {
  id            String     @id @default(cuid())
  orgId         String
  organisation  Organisation @relation(fields: [orgId], references: [id])
  // Natural person OR organisation
  kind          String     // "INDIVIDUAL" | "ORGANISATION"
  fullName      String?
  legalName     String?
  dob           DateTime?
  country       String?
  abnAcn        String?
  // Current risk posture
  riskScore     String     @default("LOW") // "LOW" | "MEDIUM" | "HIGH"
  riskRationale String?
  // Latest KYC/Screening snapshot
  lastKycId     String?
  lastScreeningId String?
  // Links
  parties       Party[]
  kycs          KycCheck[]
  screenings    Screening[]
  deals         Deal[]     @relation("EntityDeals")
  cases         Case[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  @@index([orgId, fullName])

  @@map("entities")
}

model Case {
  id            String   @id @default(cuid())
  orgId         String
  organisation  Organisation @relation(fields: [orgId], references: [id])
  entityId      String
  entity        Entity   @relation(fields: [entityId], references: [id])
  dealId        String?  // optional: case may relate to a deal
  deal          Deal?    @relation(fields: [dealId], references: [id])
  reason        CaseReason
  status        CaseStatus @default(OPEN)
  notes         Json?     // array of timeline entries with {by, at, text}
  attachments   EvidenceFile[] // reuse EvidenceFile relation
  reports       Report[]
  createdById   String
  createdBy     User      @relation(fields: [createdById], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@index([orgId, entityId, status])

  @@map("cases")
}

model Deal {
  id        String     @id @default(cuid())
  address   String
  price     Int
  status    DealStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  createdByUserId String
  createdBy       User   @relation(fields: [createdByUserId], references: [id])
  orgId           String
  org             Organisation @relation(fields: [orgId], references: [id])

  entities        Entity[]  @relation("EntityDeals") // link primary parties
  parties         Party[]
  transactions    Transaction[]
  reports         Report[]
  cases           Case[]
  riskAssessment  RiskAssessment?
  evidenceFiles   EvidenceFile[]

  @@map("deals")
}

model Party {
  id        String    @id @default(cuid())
  dealId    String
  entityId  String?
  type      PartyType
  fullName  String
  dob       DateTime?
  country   String?
  docType   String?
  docNumber String?
  pepFlag   Boolean   @default(false)
  createdAt DateTime  @default(now())

  deal       Deal         @relation(fields: [dealId], references: [id], onDelete: Cascade)
  entity     Entity?      @relation(fields: [entityId], references: [id])
  kycChecks  KycCheck[]
  screenings Screening[]
  evidenceFiles EvidenceFile[]

  @@map("parties")
}

model KycCheck {
  id                 String    @id @default(cuid())
  partyId            String?    
  dvStatus           DvStatus  @default(MANUAL)
  liveness           Boolean   @default(false)
  proofOfAddressUrl  String?
  resultJson         String?
  createdAt          DateTime  @default(now())
  // add owning Entity (optional for legacy)
  entityId   String?
  entity     Entity? @relation(fields: [entityId], references: [id])

  party Party? @relation(fields: [partyId], references: [id], onDelete: Cascade)

  @@map("kyc_checks")
}

model Screening {
  id           String  @id @default(cuid())
  partyId      String?
  pep          Boolean @default(false)
  sanctions    Boolean @default(false)
  adverseMedia Boolean @default(false)
  resultJson   String?
  createdAt    DateTime @default(now())
  entityId   String?
  entity     Entity? @relation(fields: [entityId], references: [id])

  party Party? @relation(fields: [partyId], references: [id], onDelete: Cascade)

  @@map("screenings")
}

model RiskAssessment {
  id          String    @id @default(cuid())
  dealId      String    @unique
  score       RiskScore
  answersJson String?
  rationale   String?
  createdAt   DateTime  @default(now())

  deal Deal @relation(fields: [dealId], references: [id], onDelete: Cascade)

  @@map("risk_assessments")
}

model Transaction {
  id             String            @id @default(cuid())
  dealId         String
  type           TransactionType   @default(DEPOSIT)
  subtype        TransactionSubtype?
  amount         Int
  currency       String            @default("AUD")
  direction      TransactionDirection
  counterparty   String
  method         PaymentMethod
  purpose        String?
  isCrossBorder  Boolean           @default(false)
  isStructured   Boolean           @default(false)
  isInternal     Boolean           @default(false)
  flagged        Boolean           @default(false)
  receivedAt     DateTime
  createdAt      DateTime          @default(now())

  deal Deal @relation(fields: [dealId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Report {
  id          String       @id @default(cuid())
  dealId      String
  caseId      String?
  kind        ReportKind
  status      ReportStatus @default(DRAFT)
  pdfUrl      String?
  jsonUrl     String?
  submittedAt DateTime?
  createdAt   DateTime     @default(now())

  deal Deal  @relation(fields: [dealId], references: [id], onDelete: Cascade)
  case Case? @relation(fields: [caseId], references: [id])

  @@map("reports")
}

model PolicyDocument {
  id            String   @id @default(cuid())
  orgId         String
  title         String
  markdown      String
  version       String
  effectiveFrom DateTime
  createdAt     DateTime @default(now())

  org Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@map("policy_documents")
}

model TrainingRecord {
  id          String         @id @default(cuid())
  userId      String
  course      TrainingCourse
  completedAt DateTime?
  createdAt   DateTime       @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("training_records")
}

model EvidenceFile {
  id           String       @id @default(cuid())
  dealId       String?
  partyId      String?
  caseId       String?
  kind         EvidenceKind
  fileUrl      String
  metadataJson String?
  createdAt    DateTime     @default(now())

  deal  Deal?  @relation(fields: [dealId], references: [id], onDelete: Cascade)
  party Party? @relation(fields: [partyId], references: [id], onDelete: Cascade)
  case  Case?  @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("evidence_files")
}

model AuditEvent {
  id          String   @id @default(cuid())
  orgId       String
  userId      String?
  entityType  String   @default("Deal")
  entityId    String?
  caseId      String?
  action      String
  payloadJson String?
  createdAt   DateTime @default(now())

  org    Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user   User?        @relation(fields: [userId], references: [id])

  @@map("audit_events")
}

enum Role {
  DIRECTOR
  AGENT
  COMPLIANCE
}

enum DealStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PartyType {
  BUYER
  SELLER
  UBO
}

enum DvStatus {
  PASS
  FAIL
  MANUAL
}

enum RiskScore {
  LOW
  MEDIUM
  HIGH
}

enum TransactionType {
  DEPOSIT
  BALANCE
  RENTAL
  INTERNAL_TRANSFER
}

enum TransactionDirection {
  IN
  OUT
}

enum PaymentMethod {
  BANK
  CASH
  CARD
}

enum ReportKind {
  TTR
  SMR
  ANNUAL
}

enum ReportStatus {
  DRAFT
  FINAL
}

enum TrainingCourse {
  AML_BASICS
  KYC_101
  REPORTING
}

enum EvidenceKind {
  KYC_DOC
  TRANSACTION_PROOF
  REPORT
}

enum EntityType {
  INDIVIDUAL
  COMPANY
  TRUST
  PARTNERSHIP
  GOVERNMENT
  NON_PROFIT
}

enum EntityStatus {
  ACTIVE
  INACTIVE
  UNDER_REVIEW
  SUSPENDED
}

enum CaseStatus {
  OPEN
  UNDER_REVIEW
  SUBMITTED
  CLOSED
}

enum CaseReason {
  THRESHOLD
  RISK_ESCALATION
  ADVERSE_MEDIA
  MANUAL
}

enum CasePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TransactionSubtype {
  PROPERTY_DEPOSIT
  BALANCE_PAYMENT
  COMMISSION
  LEGAL_FEES
  STAMP_DUTY
  INSPECTION_FEE
  CONVEYANCING
  MARKETING
  ADVERTISING
}